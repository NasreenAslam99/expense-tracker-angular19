{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { NgChartsModule, BaseChartDirective } from 'ng2-charts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ng2-charts\";\nexport let ExpenseChartComponent = /*#__PURE__*/(() => {\n  class ExpenseChartComponent {\n    constructor() {\n      this.transactions = [];\n      this.pieChartData = {\n        labels: [],\n        datasets: [{\n          data: [],\n          backgroundColor: [],\n          borderWidth: 1\n        }]\n      };\n      this.pieChartOptions = {\n        responsive: false,\n        // disable auto-scaling\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'right',\n            labels: {\n              font: {\n                size: 14\n              }\n            }\n          }\n        }\n      };\n    }\n    ngOnChanges() {\n      this.updateChart();\n    }\n    updateChart() {\n      const expenses = this.transactions.filter(t => t.type === 'expense');\n      const grouped = {};\n      expenses.forEach(e => {\n        grouped[e.category] = (grouped[e.category] || 0) + e.amount;\n      });\n      const categories = Object.keys(grouped);\n      const amounts = Object.values(grouped);\n      this.pieChartData.labels = categories;\n      this.pieChartData.datasets[0].data = amounts;\n      // Assign colors dynamically, repeating if more categories than colors\n      const baseColors = ['#4CAF50', '#FF5722', '#2196F3', '#FFC107', '#9C27B0', '#E91E63'];\n      this.pieChartData.datasets[0].backgroundColor = categories.map((_, i) => baseColors[i % baseColors.length]);\n      // Refresh chart\n      this.chart?.update();\n    }\n    static {\n      this.ɵfac = function ExpenseChartComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || ExpenseChartComponent)();\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: ExpenseChartComponent,\n        selectors: [[\"app-expense-chart\"]],\n        viewQuery: function ExpenseChartComponent_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(BaseChartDirective, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chart = _t.first);\n          }\n        },\n        inputs: {\n          transactions: \"transactions\"\n        },\n        features: [i0.ɵɵNgOnChangesFeature],\n        decls: 2,\n        vars: 3,\n        consts: [[2, \"width\", \"300px\", \"height\", \"300px\", \"margin\", \"auto\"], [\"baseChart\", \"\", 3, \"data\", \"options\", \"type\"]],\n        template: function ExpenseChartComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵelement(1, \"canvas\", 1);\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"data\", ctx.pieChartData)(\"options\", ctx.pieChartOptions)(\"type\", \"pie\");\n          }\n        },\n        dependencies: [CommonModule, NgChartsModule, i1.BaseChartDirective],\n        encapsulation: 2\n      });\n    }\n  }\n  return ExpenseChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}